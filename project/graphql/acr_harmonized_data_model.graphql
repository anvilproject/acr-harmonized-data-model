# metamodel_version: 1.7.0
enum EnumAccessCode
  {
    gru
    hmb
    ds
    irb
    pub
    col
    npu
    mds
    gso
    gsr
  }

enum EnumAccessType
  {
    open
    registered
    controlled
    gsr_restricted
    gsr_allowed
  }

enum EnumAssertionType
  {
    phenotypic_feature
    disease
    comorbidity
    histology
    clinical_finding
    ehr_billing_code
  }

enum EnumAvailabilityStatus
  {
    available
    unavailable
  }

enum EnumConditionAssertion
  {
    present
    absent
    unsure
    unknown
  }

enum EnumConsanguinityAssertion
  {
    not_suspected
    suspected
    known_present
    unknown
  }

enum EnumDateOfBirthType
  {
    exact
    year_only
    shifted
    decade_only
    other
  }

enum EnumEthnicity
  {
    hispanic_or_latino
    not_hispanic_or_latino
    unknown
    asked_but_unknown
  }

enum EnumFamilyType
  {
    control_only
    duo
    proband_only
    trio
    trio_plus
    other
  }

enum EnumMeasurementValueCode
  {
    negative
    positive
    not_performed
    indeterminate
  }

enum EnumRace
  {
    american_indian_or_alaskan_native
    asian
    black_or_african_american
    native_hawaiian_or_pacific_islander
    white
    other_race
    unknown
    asked_but_unknown
  }

enum EnumSex
  {
    female
    male
    unknown
    intersex
  }

enum EnumSubjectType
  {
    participant
    non_participant
    cell_line
    animal_model
    group
    other
  }

enum EnumVitalStatus
  {
    alive
    dead
    not_reported
    unknown
    unspecified
  }

type AccessControlledRecord
  {
    id: String!
    externalId: [Uriorcurie]
    hasAccessPolicy: AccessPolicy
  }

type AccessPolicy
  {
    id: String!
    externalId: [Uriorcurie]
    dataAccessType: [EnumAccessType]
    accessPolicyCode: [EnumAccessCode]!
    diseaseLimitation: String
    description: String!
    website: String
  }

type Aliquot
  {
    id: String!
    externalId: [Uriorcurie]
    sampleIdFk: String!
    sampleAvailabilityStatus: EnumAvailabilityStatus
    sampleVolume: Float
    sampleVolumeUnit: String
    sampleConcentration: Float
    sampleConcentrationUnit: String
  }

type BiospecimenCollection
  {
    id: String!
    externalId: [Uriorcurie]
    ageAtCollection: Integer
    method: EnumSampleCollectionMethod
    site: EnumSite
    spatialQualifier: EnumSpatialQualifiers
    laterality: EnumLaterality
  }

type Demographics
  {
    id: String!
    externalId: [Uriorcurie]
    hasAccessPolicy: AccessPolicy
    dateOfBirth: Integer
    dateOfBirthType: EnumDateOfBirthType
    sex: EnumSex!
    sexDisplay: String!
    race: [EnumRace]!
    raceDisplay: String!
    ethnicity: EnumEthnicity!
    ethnicityDisplay: String!
    ageAtLastVitalStatus: Integer
    vitalStatus: EnumVitalStatus
    sourceData: [SourceData]
  }

type Family
  {
    id: String!
    externalId: [Uriorcurie]
    familyExternalId: [String]
    familyType: EnumFamilyType
    familyDescription: String
    consanguinity: EnumConsanguinityAssertion
    familyStudyFocus: String
  }

type FamilyMember
  {
    id: String!
    externalId: [Uriorcurie]
    familyIdFk: String
    familyMemberId: String!
    otherFamilyMemberId: String
    relationshipCode: String
  }

type Measurement
  {
    id: String!
    externalId: [Uriorcurie]
    measurementCode: [String]!
    measurementUnit: String!
    measurementValueCode: EnumMeasurementValueCode
    measurementSourceValue: String!
    ageAtObservation: Integer
  }

type Procedure
  {
    id: String!
    externalId: [Uriorcurie]
    procedureCode: [String]!
    procedureSourceValue: String!
    ageAtEvent: Float
  }

type Sample
  {
    id: String!
    externalId: [Uriorcurie]
    parentSampleId: String
    biospecimenCollectionIdFk: String!
    sampleType: String!
    processing: [String]
    availablityStatus: EnumAvailabilityStatus
    storageMethod: String
    quantity: String
  }

type SourceData
  {
    id: String!
    externalId: [Uriorcurie]
    hasAccessPolicy: AccessPolicy
    code: Uriorcurie
    display: String
    valueCode: Uriorcurie
    valueDisplay: String
    valueNumber: Float
    valueUnits: Uriorcurie
    valueUnitsDisplay: String
  }

type Study
  {
    id: String!
    externalId: [Uriorcurie]
    externalStudyId: [String]
    parentStudyId: Study
    fundingSource: [String]
    principalInvestigator: [String]
    studyTitle: String!
  }

type Subject
  {
    id: String!
    externalId: [Uriorcurie]
    hasAccessPolicy: AccessPolicy
    subjectType: EnumSubjectType!
    organismType: String
    hasSample: [Sample]
    hasAssertion: [SubjectAssertion]
    hasDemographics: Demographics
  }

type SubjectAssertion
  {
    id: String!
    externalId: [Uriorcurie]
    hasAccessPolicy: AccessPolicy
    assertionType: EnumAssertionType
    ageAtAssertion: Float
    ageAtEvent: Float
    ageAtResolution: Float
    code: Uriorcurie
    display: String
    valueCode: Uriorcurie
    valueDisplay: String
    valueNumber: Float
    valueUnits: Uriorcurie
    valueUnitsDisplay: String
    sourceData: [SourceData]
  }

type Thing
  {
    id: String!
    externalId: [Uriorcurie]
  }

